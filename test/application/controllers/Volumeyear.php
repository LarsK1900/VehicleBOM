<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Volumeyear extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Volumeyear_model');
    } 

    /*
     * Listing of volumeyears
     */
    function index()
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('volumeyear/index?');
        $config['total_rows'] = $this->Volumeyear_model->get_all_volumeyears_count();
        $this->pagination->initialize($config);

        $data['volumeyears'] = $this->Volumeyear_model->get_all_volumeyears($params);
        
        $data['_view'] = 'volumeyear/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new volumeyear
     */
    function add()
    {   
        $this->load->library('form_validation');

		$this->form_validation->set_rules('year','Year','integer');
		$this->form_validation->set_rules('volume','Volume','integer');
		$this->form_validation->set_rules('idVolumeSource','IdVolumeSource','required');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'idVolumeSource' => $this->input->post('idVolumeSource'),
				'year' => $this->input->post('year'),
				'volume' => $this->input->post('volume'),
            );
            
            $volumeyear_id = $this->Volumeyear_model->add_volumeyear($params);
            redirect('volumeyear/index');
        }
        else
        {
			$this->load->model('Volumesource_model');
			$data['all_volumesource'] = $this->Volumesource_model->get_all_volumesource();
            
            $data['_view'] = 'volumeyear/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a volumeyear
     */
    function edit($idVolumeYears)
    {   
        // check if the volumeyear exists before trying to edit it
        $data['volumeyear'] = $this->Volumeyear_model->get_volumeyear($idVolumeYears);
        
        if(isset($data['volumeyear']['idVolumeYears']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('year','Year','integer');
			$this->form_validation->set_rules('volume','Volume','integer');
			$this->form_validation->set_rules('idVolumeSource','IdVolumeSource','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'idVolumeSource' => $this->input->post('idVolumeSource'),
					'year' => $this->input->post('year'),
					'volume' => $this->input->post('volume'),
                );

                $this->Volumeyear_model->update_volumeyear($idVolumeYears,$params);            
                redirect('volumeyear/index');
            }
            else
            {
				$this->load->model('Volumesource_model');
				$data['all_volumesource'] = $this->Volumesource_model->get_all_volumesource();

                $data['_view'] = 'volumeyear/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The volumeyear you are trying to edit does not exist.');
    } 

    /*
     * Deleting volumeyear
     */
    function remove($idVolumeYears)
    {
        $volumeyear = $this->Volumeyear_model->get_volumeyear($idVolumeYears);

        // check if the volumeyear exists before trying to delete it
        if(isset($volumeyear['idVolumeYears']))
        {
            $this->Volumeyear_model->delete_volumeyear($idVolumeYears);
            redirect('volumeyear/index');
        }
        else
            show_error('The volumeyear you are trying to delete does not exist.');
    }
    
}
