<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Volumesource extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Volumesource_model');
    } 

    /*
     * Listing of volumesource
     */
    function index()
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('volumesource/index?');
        $config['total_rows'] = $this->Volumesource_model->get_all_volumesource_count();
        $this->pagination->initialize($config);

        $data['volumesource'] = $this->Volumesource_model->get_all_volumesource($params);
        
        $data['_view'] = 'volumesource/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new volumesource
     */
    function add()
    {   
        $this->load->library('form_validation');

		$this->form_validation->set_rules('active','Active','max_length[45]');
		$this->form_validation->set_rules('date','Date','max_length[45]');
		$this->form_validation->set_rules('volumeName','VolumeName','max_length[45]');
		$this->form_validation->set_rules('source','Source','max_length[45]');
		$this->form_validation->set_rules('idIHS','IdIHS','required');
		$this->form_validation->set_rules('userID','UserID','required');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'idIHS' => $this->input->post('idIHS'),
				'userID' => $this->input->post('userID'),
				'active' => $this->input->post('active'),
				'date' => $this->input->post('date'),
				'volumeName' => $this->input->post('volumeName'),
				'source' => $this->input->post('source'),
            );
            
            $volumesource_id = $this->Volumesource_model->add_volumesource($params);
            redirect('volumesource/index');
        }
        else
        {
			$this->load->model('Ihs_model');
			$data['all_ihs'] = $this->Ihs_model->get_all_ihs();

			$this->load->model('Tbl_user_model');
			$data['all_tbl_users'] = $this->Tbl_user_model->get_all_tbl_users();
            
            $data['_view'] = 'volumesource/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a volumesource
     */
    function edit($idVolumeSource)
    {   
        // check if the volumesource exists before trying to edit it
        $data['volumesource'] = $this->Volumesource_model->get_volumesource($idVolumeSource);
        
        if(isset($data['volumesource']['idVolumeSource']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('active','Active','max_length[45]');
			$this->form_validation->set_rules('date','Date','max_length[45]');
			$this->form_validation->set_rules('volumeName','VolumeName','max_length[45]');
			$this->form_validation->set_rules('source','Source','max_length[45]');
			$this->form_validation->set_rules('idIHS','IdIHS','required');
			$this->form_validation->set_rules('userID','UserID','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'idIHS' => $this->input->post('idIHS'),
					'userID' => $this->input->post('userID'),
					'active' => $this->input->post('active'),
					'date' => $this->input->post('date'),
					'volumeName' => $this->input->post('volumeName'),
					'source' => $this->input->post('source'),
                );

                $this->Volumesource_model->update_volumesource($idVolumeSource,$params);            
                redirect('volumesource/index');
            }
            else
            {
				$this->load->model('Ihs_model');
				$data['all_ihs'] = $this->Ihs_model->get_all_ihs();

				$this->load->model('Tbl_user_model');
				$data['all_tbl_users'] = $this->Tbl_user_model->get_all_tbl_users();

                $data['_view'] = 'volumesource/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The volumesource you are trying to edit does not exist.');
    } 

    /*
     * Deleting volumesource
     */
    function remove($idVolumeSource)
    {
        $volumesource = $this->Volumesource_model->get_volumesource($idVolumeSource);

        // check if the volumesource exists before trying to delete it
        if(isset($volumesource['idVolumeSource']))
        {
            $this->Volumesource_model->delete_volumesource($idVolumeSource);
            redirect('volumesource/index');
        }
        else
            show_error('The volumesource you are trying to delete does not exist.');
    }
    
}
